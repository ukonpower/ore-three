(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("three"));
	else if(typeof define === 'function' && define.amd)
		define(["three"], factory);
	else if(typeof exports === 'object')
		exports["ORE"] = factory(require("three"));
	else
		root["ORE"] = factory(root["THREE"]);
})(self, function(__WEBPACK_EXTERNAL_MODULE_three__) {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/lethargy/lethargy.js":
/*!*******************************************!*\
  !*** ./node_modules/lethargy/lethargy.js ***!
  \*******************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_exports__, top-level-this-exports */
/*! CommonJS bailout: this is used directly at 101:8-12 */
/*! CommonJS bailout: exports is used directly at 5:43-50 */
/*! CommonJS bailout: exports is used directly at 5:62-69 */
/***/ (function(__unused_webpack_module, exports) {

// Generated by CoffeeScript 1.9.2
(function() {
  var root;

  root =  true && exports !== null ? exports : this;

  root.Lethargy = (function() {
    function Lethargy(stability, sensitivity, tolerance, delay) {
      this.stability = stability != null ? Math.abs(stability) : 8;
      this.sensitivity = sensitivity != null ? 1 + Math.abs(sensitivity) : 100;
      this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;
      this.delay = delay != null ? delay : 150;
      this.lastUpDeltas = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(null);
        }
        return results;
      }).call(this);
      this.lastDownDeltas = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(null);
        }
        return results;
      }).call(this);
      this.deltasTimestamp = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(null);
        }
        return results;
      }).call(this);
    }

    Lethargy.prototype.check = function(e) {
      var lastDelta;
      e = e.originalEvent || e;
      if (e.wheelDelta != null) {
        lastDelta = e.wheelDelta;
      } else if (e.deltaY != null) {
        lastDelta = e.deltaY * -40;
      } else if ((e.detail != null) || e.detail === 0) {
        lastDelta = e.detail * -40;
      }
      this.deltasTimestamp.push(Date.now());
      this.deltasTimestamp.shift();
      if (lastDelta > 0) {
        this.lastUpDeltas.push(lastDelta);
        this.lastUpDeltas.shift();
        return this.isInertia(1);
      } else {
        this.lastDownDeltas.push(lastDelta);
        this.lastDownDeltas.shift();
        return this.isInertia(-1);
      }
      return false;
    };

    Lethargy.prototype.isInertia = function(direction) {
      var lastDeltas, lastDeltasNew, lastDeltasOld, newAverage, newSum, oldAverage, oldSum;
      lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;
      if (lastDeltas[0] === null) {
        return direction;
      }
      if (this.deltasTimestamp[(this.stability * 2) - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[(this.stability * 2) - 1]) {
        return false;
      }
      lastDeltasOld = lastDeltas.slice(0, this.stability);
      lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);
      oldSum = lastDeltasOld.reduce(function(t, s) {
        return t + s;
      });
      newSum = lastDeltasNew.reduce(function(t, s) {
        return t + s;
      });
      oldAverage = oldSum / lastDeltasOld.length;
      newAverage = newSum / lastDeltasNew.length;
      if (Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) && (this.sensitivity < Math.abs(newAverage))) {
        return direction;
      } else {
        return false;
      }
    };

    Lethargy.prototype.showLastUpDeltas = function() {
      return this.lastUpDeltas;
    };

    Lethargy.prototype.showLastDownDeltas = function() {
      return this.lastDownDeltas;
    };

    return Lethargy;

  })();

}).call(this);


/***/ }),

/***/ "./node_modules/parse-unit/index.js":
/*!******************************************!*\
  !*** ./node_modules/parse-unit/index.js ***!
  \******************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 1:0-14 */
/***/ ((module) => {

module.exports = function parseUnit(str, out) {
    if (!out)
        out = [ 0, '' ]

    str = String(str)
    var num = parseFloat(str, 10)
    out[0] = num
    out[1] = str.match(/[\d.\-\+]*\s*(.*)/)[1] || ''
    return out
}

/***/ }),

/***/ "./src/utils/Background/shaders/background.vs":
/*!****************************************************!*\
  !*** ./src/utils/Background/shaders/background.vs ***!
  \****************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("#define GLSLIFY 1\nvarying vec2 vUv;\nvarying vec4 vColor;\n\nvoid main( void ) {\n    \n    vec3 pos = position;\n\n    pos.z = 1.0;\n    \n    gl_Position = vec4( pos, 1.0 );\n    \n    vUv = uv;\n    vColor = vec4( 1.0 );\n\n}");

/***/ }),

/***/ "./src/utils/DOMMesh/domMesh.vs":
/*!**************************************!*\
  !*** ./src/utils/DOMMesh/domMesh.vs ***!
  \**************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("#define GLSLIFY 1\nvarying vec2 vUv;\nuniform vec2 domPos;\nuniform vec2 domSize;\nuniform vec2 windowSize;\nuniform float aspectRatio;\n\nvoid main(  )\n{\n  float width = domSize.x / windowSize.x;\n\n  //左上( 0,0 )に\n  vec3 pos = position + vec3( 1.0,-1.0,0.0 );\n\n  //size\n  pos.x *= width;\n  pos.y *= ( width * aspectRatio ) * ( domSize.y / domSize.x );\n\n  pos += vec3( -1.0, 1.0, 0.0 );\n\n  pos += vec3( domPos.x / windowSize.x * 2.0, -domPos.y / windowSize.y * 2.0, 0.0 );\n\n  gl_Position = vec4( pos, 1.0 );\n  vUv = uv;\n}\n");

/***/ }),

/***/ "./src/utils/GPUComputationController/shaders/passThrough.fs":
/*!*******************************************************************!*\
  !*** ./src/utils/GPUComputationController/shaders/passThrough.fs ***!
  \*******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("#define GLSLIFY 1\nuniform sampler2D tex;\nvarying vec2 vUv;\n\nvoid main() {\n    gl_FragColor = texture2D(tex,vUv);\n}");

/***/ }),

/***/ "./src/utils/GPUComputationController/shaders/passThrough.vs":
/*!*******************************************************************!*\
  !*** ./src/utils/GPUComputationController/shaders/passThrough.vs ***!
  \*******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n    vUv = uv;\n}");

/***/ }),

/***/ "./src/utils/PostProcessing/shaders/passThrow.vs":
/*!*******************************************************!*\
  !*** ./src/utils/PostProcessing/shaders/passThrow.vs ***!
  \*******************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("#define GLSLIFY 1\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = vec4( position, 1.0 );\n}   ");

/***/ }),

/***/ "./node_modules/to-px/browser.js":
/*!***************************************!*\
  !*** ./node_modules/to-px/browser.js ***!
  \***************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 5:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var parseUnit = __webpack_require__(/*! parse-unit */ "./node_modules/parse-unit/index.js")

module.exports = toPX

var PIXELS_PER_INCH = getSizeBrutal('in', document.body) // 96


function getPropertyInPX(element, prop) {
  var parts = parseUnit(getComputedStyle(element).getPropertyValue(prop))
  return parts[0] * toPX(parts[1], element)
}

//This brutal hack is needed
function getSizeBrutal(unit, element) {
  var testDIV = document.createElement('div')
  testDIV.style['height'] = '128' + unit
  element.appendChild(testDIV)
  var size = getPropertyInPX(testDIV, 'height') / 128
  element.removeChild(testDIV)
  return size
}

function toPX(str, element) {
  if (!str) return null

  element = element || document.body
  str = (str + '' || 'px').trim().toLowerCase()
  if(element === window || element === document) {
    element = document.body
  }

  switch(str) {
    case '%':  //Ambiguous, not sure if we should use width or height
      return element.clientHeight / 100.0
    case 'ch':
    case 'ex':
      return getSizeBrutal(str, element)
    case 'em':
      return getPropertyInPX(element, 'font-size')
    case 'rem':
      return getPropertyInPX(document.body, 'font-size')
    case 'vw':
      return window.innerWidth/100
    case 'vh':
      return window.innerHeight/100
    case 'vmin':
      return Math.min(window.innerWidth, window.innerHeight) / 100
    case 'vmax':
      return Math.max(window.innerWidth, window.innerHeight) / 100
    case 'in':
      return PIXELS_PER_INCH
    case 'cm':
      return PIXELS_PER_INCH / 2.54
    case 'mm':
      return PIXELS_PER_INCH / 25.4
    case 'pt':
      return PIXELS_PER_INCH / 72
    case 'pc':
      return PIXELS_PER_INCH / 6
    case 'px':
      return 1
  }

  // detect number of units
  var parts = parseUnit(str)
  if (!isNaN(parts[0]) && parts[1]) {
    var px = toPX(parts[1], element)
    return typeof px === 'number' ? parts[0] * px : null
  }

  return null
}


/***/ }),

/***/ "./src/core/BaseLayer.ts":
/*!*******************************!*\
  !*** ./src/core/BaseLayer.ts ***!
  \*******************************/
/*! namespace exports */
/*! export BaseLayer [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseLayer": () => /* binding */ BaseLayer
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BaseLayer = /** @class */ (function (_super) {
    __extends(BaseLayer, _super);
    function BaseLayer() {
        var _this = _super.call(this) || this;
        _this.readyAnimate = false;
        _this.time = 0;
        _this.info = {
            name: '',
            canvas: null,
            wrapperElement: null,
            wrapperElementRect: null,
            aspect: {
                mainAspect: 16 / 9,
                wideAspect: 10 / 1,
                portraitAspect: 1 / 2,
                portraitWeight: 0.0,
                wideWeight: 0.0
            },
            size: {
                windowSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(),
                windowAspectRatio: 1.0,
                canvasSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(),
                canvasPixelSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(),
                canvasAspectRatio: 1.0
            }
        };
        _this.commonUniforms = {
            time: {
                value: 0
            }
        };
        _this.scene = new three__WEBPACK_IMPORTED_MODULE_0__.Scene();
        _this.camera = new three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(50, 1, 0.1, 1000);
        return _this;
    }
    BaseLayer.prototype.tick = function (deltaTime) {
        this.time += deltaTime;
        this.commonUniforms.time.value = this.time;
        if (this.readyAnimate) {
            this.animate(deltaTime);
        }
    };
    BaseLayer.prototype.animate = function (deltaTime) { };
    BaseLayer.prototype.onBind = function (layerInfo) {
        var _this = this;
        this.info.name = layerInfo.name;
        this.info.canvas = layerInfo.canvas;
        this.info.wrapperElement = layerInfo.wrapperElement;
        this.info.wrapperElementRect = layerInfo.wrapperElement && layerInfo.wrapperElement.getBoundingClientRect(),
            this.info.aspect = layerInfo.aspect || this.info.aspect;
        this.renderer = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer(this.info);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.debug.checkShaderErrors = true;
        setTimeout(function () {
            _this.onResize();
            _this.readyAnimate = true;
        }, 0);
    };
    BaseLayer.prototype.onUnbind = function () {
        this.removeChildrens(this.scene);
        this.readyAnimate = false;
    };
    BaseLayer.prototype.removeChildrens = function (object) {
        var length = object.children.length;
        for (var i = length - 1; i >= 0; i--) {
            this.removeChildrens(object.children[i]);
            var geo = void 0;
            var mat = void 0;
            if (object.children[i].isMesh) {
                geo = object.children[i].geometry;
                mat = object.children[i].material;
            }
            object.remove((object.children[i]));
            if (geo) {
                geo.dispose();
            }
            if (mat) {
                mat.dispose();
            }
        }
    };
    BaseLayer.prototype.onResize = function () {
        var newWindowSize = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(window.innerWidth, window.innerHeight);
        var newCanvasSize = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();
        if (this.info.wrapperElement) {
            newCanvasSize.set(this.info.wrapperElement.clientWidth, this.info.wrapperElement.clientHeight);
        }
        else {
            newCanvasSize.copy(newWindowSize);
        }
        var portraitWeight = 1.0 - ((newCanvasSize.x / newCanvasSize.y) - this.info.aspect.portraitAspect) / (this.info.aspect.mainAspect - this.info.aspect.portraitAspect);
        portraitWeight = Math.min(1.0, Math.max(0.0, portraitWeight));
        var wideWeight = 1.0 - ((newCanvasSize.x / newCanvasSize.y) - this.info.aspect.wideAspect) / (this.info.aspect.mainAspect - this.info.aspect.wideAspect);
        wideWeight = Math.min(1.0, Math.max(0.0, wideWeight));
        this.info.size.windowSize.copy(newWindowSize);
        this.info.size.windowAspectRatio = newWindowSize.x / newWindowSize.y;
        this.info.size.canvasSize.copy(newCanvasSize);
        this.info.size.canvasPixelSize.copy(newCanvasSize.clone().multiplyScalar(this.renderer.getPixelRatio()));
        this.info.size.canvasAspectRatio = newCanvasSize.x / newCanvasSize.y,
            this.info.aspect.portraitWeight = portraitWeight,
            this.info.aspect.wideWeight = wideWeight,
            this.renderer.setSize(this.info.size.canvasSize.x, this.info.size.canvasSize.y);
        this.camera.aspect = this.info.size.canvasAspectRatio;
        this.camera.updateProjectionMatrix();
        if (this.info.wrapperElement) {
            this.info.wrapperElementRect = this.info.wrapperElement.getBoundingClientRect();
        }
    };
    BaseLayer.prototype.pointerEvent = function (e) {
        var canvasPosition = e.position.clone();
        if (this.info.wrapperElementRect) {
            canvasPosition.x -= this.info.wrapperElementRect.x;
            canvasPosition.y -= this.info.wrapperElementRect.y;
        }
        var normalizedPosition = canvasPosition.clone();
        normalizedPosition.divide(this.info.size.canvasSize);
        normalizedPosition.y = 1.0 - normalizedPosition.y;
        normalizedPosition.multiplyScalar(2.0).subScalar(1.0);
        var args = {
            event: e.pointerEvent,
            position: canvasPosition.clone(),
            delta: e.delta.clone(),
            normalizedPosition: normalizedPosition.clone(),
            windowPosition: e.position.clone()
        };
        if (e.pointerEventType == 'hover') {
            this.onHover(args);
        }
        else if (e.pointerEventType == 'start') {
            this.onTouchStart(args);
        }
        else if (e.pointerEventType == 'move') {
            this.onTouchMove(args);
        }
        else if (e.pointerEventType == 'end') {
            this.onTouchEnd(args);
        }
    };
    BaseLayer.prototype.onTouchStart = function (args) { };
    BaseLayer.prototype.onTouchMove = function (args) { };
    BaseLayer.prototype.onTouchEnd = function (args) { };
    BaseLayer.prototype.onHover = function (args) { };
    BaseLayer.prototype.onWheel = function (event, trackpadDelta) { };
    return BaseLayer;
}(three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher));



/***/ }),

/***/ "./src/core/Controller.ts":
/*!********************************!*\
  !*** ./src/core/Controller.ts ***!
  \********************************/
/*! namespace exports */
/*! export Controller [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Controller": () => /* binding */ Controller
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_Pointer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Pointer */ "./src/utils/Pointer.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Controller = /** @class */ (function (_super) {
    __extends(Controller, _super);
    function Controller(parameter) {
        var _this = _super.call(this) || this;
        _this.layers = [];
        if (!(parameter && parameter.silent)) {
            console.log("%c- ore-three " + __webpack_require__(/*! ../../package.json */ "./package.json").version + " -", 'padding: 5px 10px ;background-color: black; color: white;font-size:11px');
        }
        _this.clock = new three__WEBPACK_IMPORTED_MODULE_0__.Clock();
        _this.pointer = new _utils_Pointer__WEBPACK_IMPORTED_MODULE_1__.Pointer();
        _this.pointer.addEventListener('update', _this.pointerEvent.bind(_this));
        _this.pointer.addEventListener('wheel', _this.onWheel.bind(_this));
        window.addEventListener('orientationchange', _this.onOrientationDevice.bind(_this));
        window.addEventListener('resize', _this.onWindowResize.bind(_this));
        _this.tick();
        return _this;
    }
    Controller.prototype.tick = function () {
        var deltaTime = this.clock.getDelta();
        this.pointer.update();
        for (var i = 0; i < this.layers.length; i++) {
            this.layers[i].tick(deltaTime);
        }
        requestAnimationFrame(this.tick.bind(this));
    };
    Controller.prototype.getLayer = function (layerName) {
        for (var i = 0; i < this.layers.length; i++) {
            if (this.layers[i].info.name == layerName)
                return this.layers[i];
        }
        return null;
    };
    Controller.prototype.addLayer = function (layer, layerInfo) {
        while (this.getLayer(layerInfo.name)) {
            layerInfo.name += '_';
        }
        layer.onBind(layerInfo);
        this.layers.push(layer);
    };
    Controller.prototype.removeLayer = function (layerNmae) {
        for (var i = this.layers.length; i >= 0; i--) {
            var layer = this.layers[i];
            if (layer.info.name == layerNmae) {
                this.layers.splice(i, 1);
            }
        }
    };
    Controller.prototype.onWindowResize = function () {
        for (var i = 0; i < this.layers.length; i++) {
            this.layers[i].onResize();
        }
    };
    Controller.prototype.onOrientationDevice = function () {
        this.onWindowResize();
    };
    Controller.prototype.pointerEvent = function (e) {
        for (var i = 0; i < this.layers.length; i++) {
            this.layers[i].pointerEvent(e);
        }
    };
    Controller.prototype.onWheel = function (e) {
        for (var i = 0; i < this.layers.length; i++) {
            this.layers[i].onWheel(e.wheelEvent, e.trackpadDelta);
        }
    };
    return Controller;
}(three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher));



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! namespace exports */
/*! export Animator [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/Animator.ts .Animator */
/*! export Background [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/Background/index.ts .Background */
/*! export BaseLayer [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/core/BaseLayer.ts .BaseLayer */
/*! export Controller [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/core/Controller.ts .Controller */
/*! export DOMMesh [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/DOMMesh/index.ts .DOMMesh */
/*! export Easings [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/Easings.ts .Easings */
/*! export EventDispatcher [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/EventDispatcher.ts .EventDispatcher */
/*! export GPUComputationController [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/GPUComputationController/index.ts .GPUComputationController */
/*! export LayoutController [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/LayoutController.ts .LayoutController */
/*! export Lerps [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/Lerps.ts .Lerps */
/*! export MouseRotator [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/MouseRotator.ts .MouseRotator */
/*! export PageScroller [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/PageScroller/index.ts .PageScroller */
/*! export PageScrollerSection [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/PageScroller/PageScrollerSection.ts .PageScrollerSection */
/*! export Pointer [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/Pointer.ts .Pointer */
/*! export PostProcessing [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/PostProcessing/index.ts .PostProcessing */
/*! export TimelineAnimator [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/TimelineAnimator.ts .TimelineAnimator */
/*! export UniformsLib [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] -> ./src/utils/Uniforms.ts .UniformsLib */
/*! other exports [not provided] [maybe used in main (runtime-defined)] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseLayer": () => /* reexport safe */ _core_BaseLayer__WEBPACK_IMPORTED_MODULE_0__.BaseLayer,
/* harmony export */   "Controller": () => /* reexport safe */ _core_Controller__WEBPACK_IMPORTED_MODULE_1__.Controller,
/* harmony export */   "Animator": () => /* reexport safe */ _utils_Animator__WEBPACK_IMPORTED_MODULE_2__.Animator,
/* harmony export */   "Background": () => /* reexport safe */ _utils_Background__WEBPACK_IMPORTED_MODULE_3__.Background,
/* harmony export */   "Pointer": () => /* reexport safe */ _utils_Pointer__WEBPACK_IMPORTED_MODULE_4__.Pointer,
/* harmony export */   "DOMMesh": () => /* reexport safe */ _utils_DOMMesh__WEBPACK_IMPORTED_MODULE_5__.DOMMesh,
/* harmony export */   "Easings": () => /* reexport safe */ _utils_Easings__WEBPACK_IMPORTED_MODULE_6__.Easings,
/* harmony export */   "EventDispatcher": () => /* reexport safe */ _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_7__.EventDispatcher,
/* harmony export */   "GPUComputationController": () => /* reexport safe */ _utils_GPUComputationController__WEBPACK_IMPORTED_MODULE_8__.GPUComputationController,
/* harmony export */   "MouseRotator": () => /* reexport safe */ _utils_MouseRotator__WEBPACK_IMPORTED_MODULE_9__.MouseRotator,
/* harmony export */   "PostProcessing": () => /* reexport safe */ _utils_PostProcessing__WEBPACK_IMPORTED_MODULE_10__.PostProcessing,
/* harmony export */   "PageScroller": () => /* reexport safe */ _utils_PageScroller__WEBPACK_IMPORTED_MODULE_11__.PageScroller,
/* harmony export */   "PageScrollerSection": () => /* reexport safe */ _utils_PageScroller_PageScrollerSection__WEBPACK_IMPORTED_MODULE_12__.PageScrollerSection,
/* harmony export */   "LayoutController": () => /* reexport safe */ _utils_LayoutController__WEBPACK_IMPORTED_MODULE_13__.LayoutController,
/* harmony export */   "TimelineAnimator": () => /* reexport safe */ _utils_TimelineAnimator__WEBPACK_IMPORTED_MODULE_14__.TimelineAnimator,
/* harmony export */   "UniformsLib": () => /* reexport safe */ _utils_Uniforms__WEBPACK_IMPORTED_MODULE_15__.UniformsLib,
/* harmony export */   "Lerps": () => /* reexport safe */ _utils_Lerps__WEBPACK_IMPORTED_MODULE_16__.Lerps
/* harmony export */ });
/* harmony import */ var _core_BaseLayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/BaseLayer */ "./src/core/BaseLayer.ts");
/* harmony import */ var _core_Controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/Controller */ "./src/core/Controller.ts");
/* harmony import */ var _utils_Animator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Animator */ "./src/utils/Animator.ts");
/* harmony import */ var _utils_Background__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/Background */ "./src/utils/Background/index.ts");
/* harmony import */ var _utils_Pointer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/Pointer */ "./src/utils/Pointer.ts");
/* harmony import */ var _utils_DOMMesh__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/DOMMesh */ "./src/utils/DOMMesh/index.ts");
/* harmony import */ var _utils_Easings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/Easings */ "./src/utils/Easings.ts");
/* harmony import */ var _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/EventDispatcher */ "./src/utils/EventDispatcher.ts");
/* harmony import */ var _utils_GPUComputationController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/GPUComputationController */ "./src/utils/GPUComputationController/index.ts");
/* harmony import */ var _utils_MouseRotator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/MouseRotator */ "./src/utils/MouseRotator.ts");
/* harmony import */ var _utils_PostProcessing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/PostProcessing */ "./src/utils/PostProcessing/index.ts");
/* harmony import */ var _utils_PageScroller__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/PageScroller */ "./src/utils/PageScroller/index.ts");
/* harmony import */ var _utils_PageScroller_PageScrollerSection__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/PageScroller/PageScrollerSection */ "./src/utils/PageScroller/PageScrollerSection.ts");
/* harmony import */ var _utils_LayoutController__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/LayoutController */ "./src/utils/LayoutController.ts");
/* harmony import */ var _utils_TimelineAnimator__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/TimelineAnimator */ "./src/utils/TimelineAnimator.ts");
/* harmony import */ var _utils_Uniforms__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/Uniforms */ "./src/utils/Uniforms.ts");
/* harmony import */ var _utils_Lerps__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/Lerps */ "./src/utils/Lerps.ts");



















/***/ }),

/***/ "./src/utils/Animator.ts":
/*!*******************************!*\
  !*** ./src/utils/Animator.ts ***!
  \*******************************/
/*! namespace exports */
/*! export Animator [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Animator": () => /* binding */ Animator
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Easings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Easings */ "./src/utils/Easings.ts");
/* harmony import */ var _Lerps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Lerps */ "./src/utils/Lerps.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var Animator = /** @class */ (function (_super) {
    __extends(Animator, _super);
    function Animator() {
        var _this = _super.call(this) || this;
        _this._isAnimating = false;
        _this.animatingCount = 0;
        _this.dispatchEvents = [];
        _this.variables = {};
        return _this;
    }
    Object.defineProperty(Animator.prototype, "isAnimating", {
        get: function () {
            return this._isAnimating;
        },
        enumerable: false,
        configurable: true
    });
    Animator.prototype.add = function (params) {
        var lerpFunc = params.customLerpFunc || _Lerps__WEBPACK_IMPORTED_MODULE_2__.Lerps.getLerpFunc(params.initValue);
        var variable = {
            time: -1,
            value: params.initValue,
            startValue: params.initValue,
            goalValue: null,
            easing: params.easing || { func: _Easings__WEBPACK_IMPORTED_MODULE_1__.Easings.sigmoid, args: 6 },
            lerpFunc: lerpFunc,
        };
        this.variables[params.name] = variable;
        return variable;
    };
    Animator.prototype.setEasing = function (name, easing) {
        var variable = this.variables[name];
        if (variable) {
            variable.easing = easing;
        }
        else {
            console.warn('"' + name + '"' + ' is not exist');
        }
    };
    Animator.prototype.animate = function (name, goalValue, duration, callback, easing) {
        var _this = this;
        if (duration === void 0) { duration = 1; }
        var variable = this.variables[name];
        var promise = new Promise(function (resolve) {
            if (variable) {
                if (duration <= 0) {
                    _this.setValue(name, goalValue);
                    variable.time = 1.0;
                    variable.onAnimationFinished = function () {
                        callback && callback();
                        resolve(null);
                    };
                    return;
                }
                if (variable.time == -1) {
                    _this._isAnimating = true;
                    _this.animatingCount++;
                }
                variable.time = 0;
                variable.duration = duration;
                variable.startValue = variable.value;
                variable.goalValue = goalValue;
                variable.onAnimationFinished = function () {
                    callback && callback();
                    resolve(null);
                };
                if (easing) {
                    _this.setEasing(name, easing);
                }
            }
            else {
                console.warn('"' + name + '"' + ' is not exist');
            }
        });
        return promise;
    };
    Animator.prototype.cancelAnimate = function (name) {
        var variable = this.variables[name];
        if (variable) {
            variable.time = 1.0;
            variable.onAnimationFinished = null;
        }
        else {
            console.warn('"' + name + '"' + ' is not exist');
        }
    };
    Animator.prototype.setValue = function (name, value) {
        if (this.variables[name]) {
            this.variables[name].value = value;
            this.cancelAnimate(name);
        }
        else {
            console.warn('"' + name + '"' + ' is not exist');
            return null;
        }
    };
    Animator.prototype.get = function (name) {
        if (this.variables[name]) {
            return this.variables[name].value;
        }
        else {
            console.warn('"' + name + '"' + ' is not exist');
            return null;
        }
    };
    Animator.prototype.getVariableObject = function (name, mute) {
        if (mute === void 0) { mute = false; }
        if (this.variables[name]) {
            return this.variables[name];
        }
        else {
            if (!mute) {
                console.warn('"' + name + '"' + ' is not exist');
            }
            return null;
        }
    };
    Animator.prototype.isAnimatingVariable = function (name, mute) {
        if (mute === void 0) { mute = false; }
        if (this.variables[name]) {
            var time = this.variables[name].time;
            return time != -1.0;
        }
        else {
            if (!mute) {
                console.warn('"' + name + '"' + ' is not exist');
            }
            return null;
        }
    };
    Animator.prototype.applyToUniforms = function (uniforms) {
        var keys = Object.keys(this.variables);
        for (var i = 0; i < keys.length; i++) {
            uniforms[keys[i]] = this.getVariableObject(keys[i]);
        }
    };
    Animator.prototype.update = function (deltaTime) {
        if (this.animatingCount == 0) {
            this._isAnimating = false;
        }
        var keys = Object.keys(this.variables);
        for (var i = 0; i < keys.length; i++) {
            var variable = this.variables[keys[i]];
            if (variable.time == 1.0) {
                this.animatingCount--;
                variable.time = -1;
                if (variable.onAnimationFinished) {
                    this.dispatchEvents.push(variable.onAnimationFinished);
                }
            }
            if (variable.time >= 0.0 && variable.time < 1.0) {
                variable.time += (deltaTime || 0.016) / variable.duration;
                if (variable.duration == 0 || variable.time >= 1.0) {
                    variable.time = 1.0;
                }
                var t = variable.time;
                if (variable.easing) {
                    t = variable.easing.func(t, variable.easing.args);
                }
                variable.value = variable.lerpFunc(variable.startValue, variable.goalValue, t);
                if (variable.time == 1.0) {
                    variable.value = variable.goalValue;
                }
            }
        }
        while (this.dispatchEvents.length != 0) {
            this.dispatchEvents.pop()();
        }
        if (this._isAnimating) {
            this.dispatchEvent({
                type: 'update',
                deltaTime: deltaTime
            });
        }
    };
    return Animator;
}(three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher));



/***/ }),

/***/ "./src/utils/Background/index.ts":
/*!***************************************!*\
  !*** ./src/utils/Background/index.ts ***!
  \***************************************/
/*! namespace exports */
/*! export Background [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Background": () => /* binding */ Background
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_background_vs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/background.vs */ "./src/utils/Background/shaders/background.vs");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Background = /** @class */ (function (_super) {
    __extends(Background, _super);
    function Background(param) {
        var _this = this;
        var geo = new three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();
        var posArray = [];
        var indexArray = [];
        var uvArray = [];
        posArray.push(-1, 1, 0);
        posArray.push(1, 1, 0);
        posArray.push(1, -1, 0);
        posArray.push(-1, -1, 0);
        uvArray.push(0, 1);
        uvArray.push(1, 1);
        uvArray.push(1, 0);
        uvArray.push(0, 0);
        indexArray.push(0, 2, 1, 0, 3, 2);
        var pos = new Float32Array(posArray);
        var indices = new Uint32Array(indexArray);
        var uv = new Float32Array(uvArray);
        geo.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(pos, 3));
        geo.setAttribute('uv', new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(uv, 2));
        geo.setIndex(new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(indices, 1));
        param.vertexShader = param.vertexShader || _shaders_background_vs__WEBPACK_IMPORTED_MODULE_1__.default;
        param.transparent = param.transparent != undefined ? param.transparent : true;
        param.depthFunc = param.depthFunc != undefined ? param.depthFunc : three__WEBPACK_IMPORTED_MODULE_0__.NeverDepth;
        var mat = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(param);
        _this = _super.call(this, geo, mat) || this;
        _this.uniforms = param.uniforms || {};
        _this.frustumCulled = false;
        return _this;
    }
    Background.prototype.resize = function (args) {
        this.uniforms.resolution = { value: args.canvasSize };
        this.uniforms.aspectRatio = { value: args.canvasAspectRatio };
    };
    return Background;
}(three__WEBPACK_IMPORTED_MODULE_0__.Mesh));



/***/ }),

/***/ "./src/utils/DOMMesh/index.ts":
/*!************************************!*\
  !*** ./src/utils/DOMMesh/index.ts ***!
  \************************************/
/*! namespace exports */
/*! export DOMMesh [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMMesh": () => /* binding */ DOMMesh
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _domMesh_vs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./domMesh.vs */ "./src/utils/DOMMesh/domMesh.vs");
/* harmony import */ var _Uniforms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Uniforms */ "./src/utils/Uniforms.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var DOMMesh = /** @class */ (function (_super) {
    __extends(DOMMesh, _super);
    function DOMMesh(element, parameter) {
        var _this = this;
        var geo = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneBufferGeometry(2, 2);
        parameter.vertexShader = _domMesh_vs__WEBPACK_IMPORTED_MODULE_1__.default;
        var uni = _Uniforms__WEBPACK_IMPORTED_MODULE_2__.UniformsLib.mergeUniforms(parameter.uniforms, {
            domPos: {
                value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()
            },
            domSize: {
                value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()
            },
            windowSize: {
                value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()
            },
            aspectRatio: {
                value: 1.0
            }
        });
        parameter.uniforms = uni;
        var mat = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(parameter);
        _this = _super.call(this, geo, mat) || this;
        _this.frustumCulled = false;
        _this._uniforms = uni;
        _this.element = element;
        _this.update();
        return _this;
    }
    Object.defineProperty(DOMMesh.prototype, "uniforms", {
        get: function () {
            return this._uniforms;
        },
        enumerable: false,
        configurable: true
    });
    DOMMesh.prototype.update = function () {
        var rect = this.element.getBoundingClientRect();
        this._uniforms.windowSize.value.set(window.innerWidth, window.innerHeight);
        this._uniforms.aspectRatio.value = window.innerWidth / window.innerHeight;
        this._uniforms.domSize.value.set(rect.width, rect.height);
        this._uniforms.domPos.value.set(rect.left, rect.top);
    };
    return DOMMesh;
}(three__WEBPACK_IMPORTED_MODULE_0__.Mesh));



/***/ }),

/***/ "./src/utils/Easings.ts":
/*!******************************!*\
  !*** ./src/utils/Easings.ts ***!
  \******************************/
/*! namespace exports */
/*! export Easings [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Easings": () => /* binding */ Easings
/* harmony export */ });
var Easings;
(function (Easings) {
    function sigmoid(x) {
        var variables = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            variables[_i - 1] = arguments[_i];
        }
        var weight = 6;
        if (variables[0]) {
            weight = variables[0];
        }
        var e1 = Math.exp(-weight * (2 * x - 1));
        var e2 = Math.exp(-weight);
        return (1 + (1 - e1) / (1 + e1) * (1 + e2) / (1 - e2)) / 2;
    }
    Easings.sigmoid = sigmoid;
    function smoothstep(min, max, value) {
        var x = Math.max(0, Math.min(1, value - min / (max - min)));
        return x * x * (3 - 2 * x);
    }
    Easings.smoothstep = smoothstep;
    function lerpNumber(a, b, t) {
        return (1.0 - t) * a + t * b;
    }
    Easings.lerpNumber = lerpNumber;
    /*
    @auther https://gist.github.com/gre/1650294
    */
    function linear(t) {
        return t;
    }
    Easings.linear = linear;
    // accelerating from zero velocity
    function easeInQuad(t) {
        return t * t;
    }
    Easings.easeInQuad = easeInQuad;
    // decelerating to zero velocity
    function easeOutQuad(t) {
        return t * (2 - t);
    }
    Easings.easeOutQuad = easeOutQuad;
    // acceleration until halfway, then deceleration
    function easeInOutQuad(t) {
        return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }
    Easings.easeInOutQuad = easeInOutQuad;
    // accelerating from zero velocity
    function easeInCubic(t) {
        return t * t * t;
    }
    Easings.easeInCubic = easeInCubic;
    // decelerating to zero velocity
    function easeOutCubic(t) {
        return (--t) * t * t + 1;
    }
    Easings.easeOutCubic = easeOutCubic;
    // acceleration until halfway, then deceleration
    function easeInOutCubic(t) {
        return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }
    Easings.easeInOutCubic = easeInOutCubic;
    // accelerating from zero velocity
    function easeInQuart(t) {
        return t * t * t * t;
    }
    Easings.easeInQuart = easeInQuart;
    // decelerating to zero velocity
    function easeOutQuart(t) {
        return 1 - (--t) * t * t * t;
    }
    Easings.easeOutQuart = easeOutQuart;
    // acceleration until halfway, then deceleration
    function easeInOutQuart(t) {
        return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;
    }
    Easings.easeInOutQuart = easeInOutQuart;
    // accelerating from zero velocity
    function easeInQuint(t) {
        return t * t * t * t * t;
    }
    Easings.easeInQuint = easeInQuint;
    // decelerating to zero velocity
    function easeOutQuint(t) {
        return 1 + (--t) * t * t * t * t;
    }
    Easings.easeOutQuint = easeOutQuint;
    // acceleration until halfway, then deceleration
    function easeInOutQuint(t) {
        return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;
    }
    Easings.easeInOutQuint = easeInOutQuint;
})(Easings || (Easings = {}));


/***/ }),

/***/ "./src/utils/EventDispatcher.ts":
/*!**************************************!*\
  !*** ./src/utils/EventDispatcher.ts ***!
  \**************************************/
/*! namespace exports */
/*! export EventDispatcher [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": () => /* binding */ EventDispatcher
/* harmony export */ });
var EventDispatcher = /** @class */ (function () {
    function EventDispatcher() {
        this.events = [];
    }
    EventDispatcher.prototype.addEventListener = function (type, listener) {
        this.events.push({
            type: type,
            listener: listener
        });
    };
    EventDispatcher.prototype.dispatchEvent = function (event) {
        event.target = this;
        for (var i = 0; i < this.events.length; i++) {
            if (event.type == this.events[i].type) {
                this.events[i].listener(event);
            }
        }
    };
    EventDispatcher.prototype.removeEventListener = function (type, listener) {
        for (var i = this.events.length; i >= 0; i--) {
            if (type == this.events[i].type && listener == this.events[i].listener) {
                this.events.splice(i, 1);
            }
        }
    };
    return EventDispatcher;
}());



/***/ }),

/***/ "./src/utils/GPUComputationController/index.ts":
/*!*****************************************************!*\
  !*** ./src/utils/GPUComputationController/index.ts ***!
  \*****************************************************/
/*! namespace exports */
/*! export GPUComputationController [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GPUComputationController": () => /* binding */ GPUComputationController
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_passThrough_vs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/passThrough.vs */ "./src/utils/GPUComputationController/shaders/passThrough.vs");
/* harmony import */ var _shaders_passThrough_fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/passThrough.fs */ "./src/utils/GPUComputationController/shaders/passThrough.fs");
/* harmony import */ var _Uniforms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Uniforms */ "./src/utils/Uniforms.ts");




var GPUComputationController = /** @class */ (function () {
    function GPUComputationController(renderer, dataSize) {
        this.renderTargets = [];
        this.renderer = renderer;
        this.dataSize = dataSize.clone();
        this.uniforms = {
            dataSize: {
                value: this.dataSize
            }
        };
        this.tempDataLinear = this.createData({
            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,
            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter
        });
        this.tempDataNear = this.createData({
            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,
            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter
        });
        this.scene = new three__WEBPACK_IMPORTED_MODULE_0__.Scene();
        this.camera = new three__WEBPACK_IMPORTED_MODULE_0__.Camera();
        this.materials = [];
        this.mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(new three__WEBPACK_IMPORTED_MODULE_0__.PlaneBufferGeometry(2, 2));
        this.scene.add(this.mesh);
    }
    Object.defineProperty(GPUComputationController.prototype, "isSupported", {
        get: function () {
            return this.renderer.extensions.get("OES_texture_float");
        },
        enumerable: false,
        configurable: true
    });
    GPUComputationController.prototype.createInitializeTexture = function () {
        var a = new Float32Array(this.uniforms.dataSize.value.x * this.uniforms.dataSize.value.y * 4);
        var texture = new three__WEBPACK_IMPORTED_MODULE_0__.DataTexture(a, this.uniforms.dataSize.value.x, this.uniforms.dataSize.value.y, three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat, three__WEBPACK_IMPORTED_MODULE_0__.FloatType);
        texture.needsUpdate = true;
        return texture;
    };
    GPUComputationController.prototype.createData = function (initTex_texParam, textureParam) {
        var userAgent = navigator.userAgent;
        var isiOS = userAgent.indexOf('iPhone') >= 0 || userAgent.indexOf('iPad') >= 0 || navigator.platform == "iPad" || (navigator.platform == "MacIntel" && navigator.userAgent.indexOf("Safari") != -1 && navigator.userAgent.indexOf("Chrome") == -1 && navigator.standalone !== undefined);
        var param = {
            wrapS: three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping,
            wrapT: three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping,
            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,
            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,
            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat,
            type: isiOS ? three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType : three__WEBPACK_IMPORTED_MODULE_0__.FloatType,
            stencilBuffer: false,
            depthBuffer: false
        };
        var initTex;
        var customParam;
        if (initTex_texParam) {
            if (initTex_texParam.isDataTexture) {
                initTex = initTex_texParam;
                if (textureParam) {
                    customParam = textureParam;
                }
            }
            else {
                customParam = initTex_texParam;
            }
        }
        if (customParam) {
            param.wrapS = customParam.wrapS || param.wrapS;
            param.wrapT = customParam.wrapT || param.wrapT;
            param.minFilter = customParam.minFilter || param.minFilter;
            param.magFilter = customParam.magFilter || param.magFilter;
            param.format = customParam.format || param.format;
            param.type = customParam.type || param.type;
            param.stencilBuffer = customParam.stencilBuffer || param.stencilBuffer;
            param.depthBuffer = customParam.depthBuffer || param.depthBuffer;
        }
        var buf = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.uniforms.dataSize.value.x, this.uniforms.dataSize.value.y, param);
        var data = { buffer: buf };
        this.renderTargets.push(buf);
        if (initTex) {
            var initKernel = this.createKernel({
                fragmentShader: _shaders_passThrough_fs__WEBPACK_IMPORTED_MODULE_2__.default
            });
            initKernel.uniforms.tex = { value: initTex };
            this.compute(initKernel, data);
        }
        return data;
    };
    GPUComputationController.prototype.createKernel = function (param) {
        var uni = _Uniforms__WEBPACK_IMPORTED_MODULE_3__.UniformsLib.mergeUniforms(param.uniforms, {});
        uni = _Uniforms__WEBPACK_IMPORTED_MODULE_3__.UniformsLib.mergeUniforms(this.uniforms, uni);
        param.vertexShader = param.vertexShader || _shaders_passThrough_vs__WEBPACK_IMPORTED_MODULE_1__.default;
        var mat = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(param);
        this.materials.push(mat);
        var kernel = {
            material: mat,
            uniforms: uni
        };
        return kernel;
    };
    GPUComputationController.prototype.compute = function (kernel, data, camera) {
        var temp;
        if (data.buffer.texture.magFilter == three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter) {
            temp = this.tempDataLinear;
        }
        else {
            temp = this.tempDataNear;
        }
        this.mesh.material = kernel.material;
        var currentRenderTarget = this.renderer.getRenderTarget();
        this.renderer.setRenderTarget(temp.buffer);
        this.renderer.render(this.scene, camera || this.camera);
        this.swapBuffers(data, temp);
        this.renderer.setRenderTarget(currentRenderTarget);
    };
    GPUComputationController.prototype.swapBuffers = function (b1, b2) {
        var tmp = b1.buffer;
        b1.buffer = b2.buffer;
        b2.buffer = tmp;
    };
    GPUComputationController.prototype.dispose = function () {
        var geo = this.mesh.geometry;
        geo.dispose();
        for (var i = 0; i < this.materials.length; i++) {
            this.materials[i].dispose();
        }
        this.scene.remove(this.mesh);
        this.tempDataLinear.buffer.dispose();
        this.tempDataNear.buffer.dispose();
    };
    GPUComputationController.prototype.resizeData = function (dataSize) {
        this.dataSize.copy(dataSize);
        for (var i = 0; i < this.renderTargets.length; i++) {
            var target = this.renderTargets[i];
            target.setSize(dataSize.x, dataSize.y);
        }
    };
    return GPUComputationController;
}());



/***/ }),

/***/ "./src/utils/LayoutController.ts":
/*!***************************************!*\
  !*** ./src/utils/LayoutController.ts ***!
  \***************************************/
/*! namespace exports */
/*! export LayoutController [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LayoutController": () => /* binding */ LayoutController
/* harmony export */ });
var LayoutController = /** @class */ (function () {
    function LayoutController(object, transform, isAbsolutePosition) {
        this.obj = object;
        this.baseTransform = {
            position: this.obj.position.clone(),
            rotation: this.obj.quaternion.clone(),
        };
        this.baseScale = this.obj.scale.clone();
        this.transform = transform;
        if (!isAbsolutePosition) {
            this.transform.position && this.transform.position.add(this.obj.position);
            this.transform.rotation && this.transform.rotation.multiply(this.obj.quaternion);
        }
    }
    LayoutController.prototype.updateTransform = function (weight) {
        if (this.transform.position) {
            this.obj.position.copy(this.baseTransform.position.clone().lerp(this.transform.position, weight));
        }
        if (this.transform.rotation) {
            this.obj.quaternion.copy(this.baseTransform.rotation.clone().slerp(this.transform.rotation, weight));
        }
        if (this.transform.scale) {
            this.obj.scale.copy(this.baseScale.clone().multiplyScalar(this.transform.scale * (weight) + 1.0 - weight));
        }
    };
    return LayoutController;
}());



/***/ }),

/***/ "./src/utils/Lerps.ts":
/*!****************************!*\
  !*** ./src/utils/Lerps.ts ***!
  \****************************/
/*! namespace exports */
/*! export Lerps [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Lerps": () => /* binding */ Lerps
/* harmony export */ });
var Lerps;
(function (Lerps) {
    function number(a, b, t) {
        return a + (b - a) * t;
    }
    Lerps.number = number;
    function numberArray(a, b, t) {
        if (a.length == b.length) {
            var c = [];
            for (var i = 0; i < a.length; i++) {
                c.push(a[i] + (b[i] - a[i]) * t);
            }
            return c;
        }
        else {
            console.log('Different length Arrays!!!');
            return false;
        }
    }
    Lerps.numberArray = numberArray;
    function THREEVectors(a, b, t) {
        return a.clone().lerp(b, t);
    }
    Lerps.THREEVectors = THREEVectors;
    function THREEQuaternion(a, b, t) {
        return a.clone().slerp(b, t);
    }
    Lerps.THREEQuaternion = THREEQuaternion;
    function THREEEuler(a, b, t) {
        var ac = a.clone();
        var bc = b.clone();
        ac.x = ac.x + (bc.x - ac.x) * t;
        ac.y = ac.y + (bc.y - ac.y) * t;
        ac.z = ac.z + (bc.z - ac.z) * t;
        return ac;
    }
    Lerps.THREEEuler = THREEEuler;
    function getLerpFunc(value) {
        if (typeof (value) == 'number') {
            return Lerps.number;
        }
        else if (value instanceof Array && typeof (value[0]) == 'number') {
            return Lerps.numberArray;
        }
        else if (value.isVector2 | value.isVector3 | value.isVector4 | value.isColor) {
            return Lerps.THREEVectors;
        }
        else if (value.isQuaternion) {
            return Lerps.THREEQuaternion;
        }
        else if (value.isEuler) {
            return Lerps.THREEEuler;
        }
    }
    Lerps.getLerpFunc = getLerpFunc;
})(Lerps || (Lerps = {}));


/***/ }),

/***/ "./src/utils/MouseRotator.ts":
/*!***********************************!*\
  !*** ./src/utils/MouseRotator.ts ***!
  \***********************************/
/*! namespace exports */
/*! export MouseRotator [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseRotator": () => /* binding */ MouseRotator
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);

var MouseRotator = /** @class */ (function () {
    function MouseRotator(objs) {
        this.target = objs;
        this.scrollVel = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();
    }
    MouseRotator.prototype.update = function () {
        this.scrollVel.multiplyScalar(0.96);
        var axis = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(this.scrollVel.y, this.scrollVel.x, 0.0).normalize();
        var q = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion().setFromAxisAngle(axis, this.scrollVel.length());
        q.multiply(this.target.quaternion);
        this.target.quaternion.copy(q);
    };
    MouseRotator.prototype.addVelocity = function (scrollDelta) {
        this.scrollVel.addVectors(this.scrollVel, scrollDelta.multiplyScalar(0.001));
    };
    return MouseRotator;
}());



/***/ }),

/***/ "./src/utils/PageScroller/PageScrollerSection.ts":
/*!*******************************************************!*\
  !*** ./src/utils/PageScroller/PageScrollerSection.ts ***!
  \*******************************************************/
/*! namespace exports */
/*! export PageScrollerSection [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageScrollerSection": () => /* binding */ PageScrollerSection
/* harmony export */ });
var PageScrollerSection = /** @class */ (function () {
    function PageScrollerSection(params) {
        this.timelinePercentage = 0;
        this.name = params.name;
        this.element = params.element;
        this.stop = params.stop;
        this.events = params.events;
        this.bottom = params.bottom;
        this.startScrollDown = params.startScrollDown || 0;
        this.startScrollUp = params.startScrollUp || 0;
        this.updateRect(0);
    }
    Object.defineProperty(PageScrollerSection.prototype, "isPageScrollerSection", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    PageScrollerSection.prototype.updateRect = function (scrollPos) {
        this.rect = {
            x: this.element.offsetLeft,
            y: this.element.offsetTop - scrollPos,
            width: this.element.offsetWidth,
            height: this.element.offsetHeight
        };
    };
    PageScrollerSection.prototype.getScrollPercentage = function (offsetPos) {
        var bottomOffset = (this.bottom ? this.rect.height - window.innerHeight : 0);
        var pos = (this.rect.y + bottomOffset) - (offsetPos || 0);
        var firstHalfHeight = this.bottom ? this.rect.height : window.innerHeight;
        var firstHalf = Math.min(1.0, 1.0 - (pos / firstHalfHeight));
        var secondHalfHeight = this.bottom ? window.innerHeight : this.rect.height;
        var secondHalf = Math.max(0.0, -pos / secondHalfHeight);
        var percentage = firstHalf + secondHalf;
        return percentage;
    };
    return PageScrollerSection;
}());



/***/ }),

/***/ "./src/utils/PageScroller/index.ts":
/*!*****************************************!*\
  !*** ./src/utils/PageScroller/index.ts ***!
  \*****************************************/
/*! namespace exports */
/*! export PageScroller [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageScroller": () => /* binding */ PageScroller
/* harmony export */ });
/* harmony import */ var _Easings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Easings */ "./src/utils/Easings.ts");
/* harmony import */ var _Animator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Animator */ "./src/utils/Animator.ts");


var PageScroller = /** @class */ (function () {
    function PageScroller(parentElement) {
        this.delaySpeed = 0.1;
        this.dragDelaySpeed = 0.4;
        this.isTouching = false;
        this.deltaMem = 0;
        this.scrollReady = false;
        this.sumDelta = 0;
        this._scrollPos = 0;
        this._scrollPercentage = 0;
        this._scrollPosDelay = 0;
        this._scrollPercentageDelay = 0;
        this.dragStop = false;
        this.dragUnlockReady = true;
        this.parentElement = parentElement;
        this.sections = [];
        this.initAnimator();
    }
    PageScroller.prototype.initAnimator = function () {
        this.animator = new _Animator__WEBPACK_IMPORTED_MODULE_1__.Animator();
        this.animator.add({
            name: 'scrollPos',
            initValue: 0,
            easing: {
                func: _Easings__WEBPACK_IMPORTED_MODULE_0__.Easings.sigmoid,
                args: 4
            }
        });
    };
    Object.defineProperty(PageScroller.prototype, "scrollPos", {
        get: function () {
            return this._scrollPos;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageScroller.prototype, "scrollPosDelay", {
        get: function () {
            return this._scrollPosDelay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageScroller.prototype, "scrollPercentage", {
        get: function () {
            return this._scrollPercentage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageScroller.prototype, "scrollPercentageDelay", {
        get: function () {
            return this._scrollPercentageDelay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageScroller.prototype, "scrollTimelinePercentage", {
        get: function () {
            var sum = 0;
            for (var i = 0; i < this.sections.length; i++) {
                var sec = this.sections[i];
                var secBef = this.sections[i - 1];
                var a = Math.max(0.0, sec.element.offsetTop - this.scrollPosDelay + (sec.bottom ? sec.rect.height - window.innerHeight : 0));
                var b = ((secBef ? secBef.rect.height - (secBef.bottom ? window.innerHeight : 0) : 0) + (sec.bottom ? sec.rect.height - window.innerHeight : 0)) || 1;
                var d = 1.0 - (a / b);
                d = Math.max(0.0, d);
                sum += d;
                if (d < 1.0)
                    break;
            }
            return sum / this.sections.length;
        },
        enumerable: false,
        configurable: true
    });
    PageScroller.prototype.add = function (section) {
        this.sections.push(section);
        this.sortSections();
    };
    PageScroller.prototype.sortSections = function () {
        this.sections.sort(function (a, b) {
            return a.rect.y > b.rect.y ? 1 : -1;
        });
        for (var i = 0; i < this.sections.length; i++) {
            this.sections[i].timelinePercentage = (i + 1) / this.sections.length;
        }
    };
    PageScroller.prototype.get = function (name) {
        for (var i = 0; i < this.sections.length; i++) {
            if (this.sections[i].name == name)
                return this.sections[i];
        }
        console.warn('section "' + name + '" is not exist.');
        return null;
    };
    PageScroller.prototype.update = function (deltaTime) {
        this.updateParentElement();
        this.updateScrollPos(deltaTime);
        this.applyParentElementTransform();
        this.sumDelta = 0.0;
    };
    PageScroller.prototype.updateScrollPos = function (deltaTime) {
        this.updateAutoMove(deltaTime);
        this.addScrollPos();
        this.calcScrollProperties(deltaTime);
    };
    PageScroller.prototype.updateAutoMove = function (deltaTime) {
        this.animator.update(deltaTime);
        if (this.isAutoMove) {
            this.sumDelta = this.animator.get('scrollPos') - this.scrollPos;
        }
    };
    PageScroller.prototype.addScrollPos = function () {
        if (this.checkUnlockStopScroll(this.sumDelta)) {
            var stopPos = this.checkThrow(this.sumDelta);
            if (stopPos !== null) {
                this._scrollPos = stopPos;
            }
            else {
                this._scrollPos += this.sumDelta;
            }
            this._scrollPos = Math.max(Math.min(this._scrollPos, this.parentElementHeight - window.innerHeight), 0);
        }
    };
    PageScroller.prototype.checkUnlockStopScroll = function (scrollDelta) {
        var unlockDir = 0;
        var unlock = false;
        if (this.caughtSection) {
            var distance = this.scrollPos - this.scrollPosDelay;
            if (scrollDelta * distance < 0 || Math.abs(distance) < 10.0 || this.isAutoMove) {
                if (scrollDelta < 0) {
                    if (-scrollDelta > (this.caughtSection.startScrollUp || 0) || this.isAutoMove) {
                        unlockDir = -1;
                    }
                }
                else if (scrollDelta > 0) {
                    if (scrollDelta > (this.caughtSection.startScrollDown || 0) || this.isAutoMove) {
                        unlockDir = 1;
                    }
                }
            }
            if (unlockDir != 0 && this.caughtSection.events) {
                if (this.caughtSection.events.onStartScroll) {
                    var args = {
                        scroller: this,
                        section: this.caughtSection,
                        scrollMode: this.isAutoMove ? 'auto' : 'manual',
                        scrollDelta: scrollDelta,
                        scrollPower: Math.abs(scrollDelta),
                    };
                    var unlock_1;
                    var commonUnlock = this.caughtSection.events.onStartScroll.common && this.caughtSection.events.onStartScroll.common(args);
                    if (unlockDir == -1)
                        unlock_1 = this.caughtSection.events.onStartScroll.up && this.caughtSection.events.onStartScroll.up(args);
                    if (unlockDir == 1)
                        unlock_1 = this.caughtSection.events.onStartScroll.down && this.caughtSection.events.onStartScroll.down(args);
                    if (commonUnlock === false || unlock_1 === false) {
                        unlockDir = 0;
                    }
                }
            }
            unlock = unlockDir != 0;
        }
        else {
            unlock = true;
        }
        if (unlockDir) {
            this.caughtSection = null;
        }
        return unlock;
    };
    PageScroller.prototype.checkThrow = function (scrollDelta) {
        for (var i = 0; i < this.sections.length; i++) {
            var sec = this.sections[i];
            sec.updateRect(this._scrollPos);
            var stopPos = this.checkThrowSectionEvents(sec, scrollDelta);
            if (stopPos !== null) {
                this.caughtSection = sec;
                return this.isAutoMove ? null : stopPos;
            }
        }
        return null;
    };
    PageScroller.prototype.checkThrowSectionEvents = function (section, scrollDelta) {
        var percentage = section.getScrollPercentage();
        var movedPercentage = section.getScrollPercentage(scrollDelta);
        if (section.events) {
            var args = {
                scroller: this,
                section: section,
                scrollMode: this.isAutoMove ? 'auto' : 'manual',
                scrollDelta: scrollDelta,
                scrollPower: Math.abs(scrollDelta),
            };
            var arrivalEvents = section.events.onArrivals && section.events.onArrivals.length || 0;
            for (var i = 0; i < arrivalEvents; i++) {
                var arrivalEvent = section.events.onArrivals[i];
                var isThrow = this.checkThrowLine(percentage, movedPercentage, arrivalEvent.percentage);
                if (isThrow != 0) {
                    arrivalEvent.event.common && arrivalEvent.event.common(args);
                    if (isThrow < 0) {
                        arrivalEvent.event.up && arrivalEvent.event.up(args);
                    }
                    else {
                        arrivalEvent.event.down && arrivalEvent.event.down(args);
                    }
                }
            }
        }
        if (section.stop) {
            if (this.checkThrowLine(percentage, movedPercentage, 1)) {
                this.dragUnlockReady = false;
                return section.element.offsetTop + (section.bottom ? section.rect.height - window.innerHeight : 0);
            }
        }
        return null;
    };
    PageScroller.prototype.checkThrowLine = function (a, b, line) {
        if (a < line && line <= b) {
            return 1;
        }
        else if (a > line && line >= b) {
            return -1;
        }
        else if (a == line && line == b) {
            return 2;
        }
        else {
            return 0;
        }
    };
    PageScroller.prototype.calcScrollProperties = function (deltaTime) {
        this._scrollPosDelay += (this._scrollPos - this._scrollPosDelay) * (this.isTouching && !this.caughtSection ? this.dragDelaySpeed : this.delaySpeed) * Math.min(1.0, deltaTime * 60);
        this._scrollPercentage = this.scrollPosToPerecntage(this.scrollPos);
        this._scrollPercentageDelay = this.scrollPosToPerecntage(this.scrollPosDelay);
    };
    PageScroller.prototype.scrollPosToPerecntage = function (scrollPos) {
        return scrollPos / (this.parentElementHeight - window.innerHeight);
    };
    PageScroller.prototype.updateParentElement = function () {
        this.parentElementHeight = this.parentElement.getBoundingClientRect().height;
    };
    PageScroller.prototype.applyParentElementTransform = function () {
        this.parentElement.style.transform = 'translate3d( 0,' + -this.scrollPosDelay.toString() + 'px, 0 )';
    };
    PageScroller.prototype.scroll = function (delta) {
        this.deltaMem = (this.deltaMem + delta) / 2;
        this.sumDelta += delta;
    };
    PageScroller.prototype.catch = function () {
        if (this.isAutoMove)
            return;
        this.isTouching = true;
        this.deltaMem = 0;
        if (!this.caughtSection) {
            this._scrollPos = this._scrollPosDelay;
        }
    };
    PageScroller.prototype.drag = function (delta) {
        if (!this.isTouching)
            return;
        this.scroll(delta);
    };
    PageScroller.prototype.release = function (snap) {
        if (snap === void 0) { snap = 10.0; }
        if (!this.isTouching)
            return;
        this.isTouching = false;
        if (!this.caughtSection) {
            this.scroll(this.deltaMem * snap);
        }
    };
    PageScroller.prototype.autoMove = function (param) {
        var _this = this;
        var targetPos;
        if (param.target.isPageScrollerSection) {
            var target = param.target;
            var bottomOffset = param.bottom ? target.rect.height - window.innerHeight : 0;
            targetPos = target.element.offsetTop + bottomOffset;
        }
        else if (typeof param.target == 'string') {
            var target = this.get(param.target);
            var bottomOffset = param.bottom ? target.rect.height - window.innerHeight : 0;
            targetPos = target.element.offsetTop + bottomOffset;
        }
        else if (typeof param.target == 'number') {
            targetPos = param.target;
        }
        this.animator.setValue('scrollPos', this._scrollPos);
        this.animator.animate('scrollPos', targetPos, param.duration, function () {
            if (param.callBack)
                param.callBack();
            _this.isAutoMove = false;
        }, param.easing);
        //onStartScroll内でAutoMoveしたとき、無限ループに陥るのを阻止
        this.sumDelta = (targetPos - this.sumDelta) / Math.abs(targetPos - this.sumDelta) * 0.00001;
        this.isAutoMove = true;
    };
    return PageScroller;
}());



/***/ }),

/***/ "./src/utils/Pointer.ts":
/*!******************************!*\
  !*** ./src/utils/Pointer.ts ***!
  \******************************/
/*! namespace exports */
/*! export Pointer [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Pointer": () => /* binding */ Pointer
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lethargy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lethargy */ "./node_modules/lethargy/lethargy.js");
/* harmony import */ var lethargy__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lethargy__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var to_px__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! to-px */ "./node_modules/to-px/browser.js");
/* harmony import */ var to_px__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(to_px__WEBPACK_IMPORTED_MODULE_2__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var Pointer = /** @class */ (function (_super) {
    __extends(Pointer, _super);
    function Pointer() {
        var _this = _super.call(this) || this;
        _this.trackpadMemDelta = 0;
        _this.trackpadMax = false;
        _this.lethargy = new lethargy__WEBPACK_IMPORTED_MODULE_1__.Lethargy(7, 0, 0.05);
        _this.position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(NaN, NaN);
        _this.delta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(NaN, NaN);
        var userAgent = navigator.userAgent;
        _this.isSP = userAgent.indexOf('iPhone') >= 0 || userAgent.indexOf('iPad') >= 0 || userAgent.indexOf('Android') >= 0 || navigator.platform == "iPad" || (navigator.platform == "MacIntel" && navigator.userAgent.indexOf("Safari") != -1 && navigator.userAgent.indexOf("Chrome") == -1 && navigator.standalone !== undefined);
        window.addEventListener('touchstart', _this.onTouch.bind(_this, "start"), { passive: false });
        window.addEventListener('touchmove', _this.onTouch.bind(_this, "move"), { passive: false });
        window.addEventListener('touchend', _this.onTouch.bind(_this, "end"), { passive: false });
        window.addEventListener('pointerdown', _this.onPointer.bind(_this, "start"));
        window.addEventListener('pointermove', _this.onPointer.bind(_this, "move"));
        window.addEventListener('pointerup', _this.onPointer.bind(_this, "end"));
        window.addEventListener("dragend", _this.onPointer.bind(_this, "end"));
        window.addEventListener("wheel", _this.wheel.bind(_this), { passive: false });
        _this.position.set(NaN, NaN);
        _this.isTouching = false;
        return _this;
    }
    Pointer.prototype.getNormalizePosition = function (windowSize) {
        if (this.position.x != this.position.x)
            return new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(NaN, NaN);
        var p = this.position.clone()
            .divide(windowSize)
            .multiplyScalar(2.0)
            .subScalar(1.0);
        p.y *= -1;
        return p;
    };
    Pointer.prototype.getRelativePosition = function (elm, normalize) {
        var rect = elm.getClientRects()[0];
        var pos;
        var x = pos.x - rect.left;
        var y = pos.y - rect.top;
        if (normalize) {
            x /= rect.width;
            y /= rect.height;
        }
        var p = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(x, y);
        return p;
    };
    Pointer.prototype.setPos = function (x, y) {
        if (this.position.x !== this.position.x ||
            this.position.y !== this.position.y) {
            this.delta.set(0, 0);
        }
        else {
            this.delta.set(x - this.position.x, y - this.position.y);
        }
        this.position.set(x, y);
    };
    Pointer.prototype.onTouch = function (type, e) {
        var touch = e.touches[0];
        if (touch) {
            this.touchEventHandler(touch.pageX, touch.pageY, type, e);
        }
        else {
            if (type == 'end') {
                this.touchEventHandler(NaN, NaN, type, e);
            }
        }
    };
    Pointer.prototype.onPointer = function (type, e) {
        if (e.pointerType == 'mouse' && (e.button == -1 || e.button == 0)) {
            this.touchEventHandler(e.pageX, e.pageY, type, e);
        }
    };
    Pointer.prototype.touchEventHandler = function (posX, posY, type, e) {
        var dispatch = false;
        var x = posX - window.pageXOffset;
        var y = posY - window.pageYOffset;
        if (type == "start") {
            this.isTouching = true;
            this.setPos(x, y);
            this.delta.set(0, 0);
            dispatch = true;
        }
        else if (type == "move") {
            this.setPos(x, y);
            if (this.isTouching) {
                dispatch = true;
            }
        }
        else if (type == "end") {
            this.isTouching = false;
            dispatch = true;
        }
        if (dispatch) {
            this.dispatchEvent({
                type: 'update',
                pointerEvent: e,
                pointerEventType: type,
                position: this.position.clone(),
                delta: this.delta.clone()
            });
        }
    };
    Pointer.prototype.update = function () {
        if (!this.isSP) {
            this.dispatchEvent({
                type: 'update',
                pointerEvent: null,
                pointerEventType: 'hover',
                position: this.position.clone(),
                delta: this.delta.clone()
            });
        }
    };
    Pointer.prototype.wheel = function (e) {
        var delta = e.deltaY;
        var trackpadDelta = 0;
        switch (e.deltaMode) {
            case e.DOM_DELTA_LINE:
                delta *= to_px__WEBPACK_IMPORTED_MODULE_2___default()('ex', window) * 2.5;
                break;
            case e.DOM_DELTA_PAGE:
                delta *= window.innerHeight;
                break;
        }
        if (this.lethargy.check(e)) {
            trackpadDelta = delta;
        }
        this.dispatchEvent({
            type: 'wheel',
            wheelEvent: e,
            trackpadDelta: trackpadDelta
        });
    };
    return Pointer;
}(three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher));



/***/ }),

/***/ "./src/utils/PostProcessing/index.ts":
/*!*******************************************!*\
  !*** ./src/utils/PostProcessing/index.ts ***!
  \*******************************************/
/*! namespace exports */
/*! export PostProcessing [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PostProcessing": () => /* binding */ PostProcessing
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_passThrow_vs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/passThrow.vs */ "./src/utils/PostProcessing/shaders/passThrow.vs");


var PostProcessing = /** @class */ (function () {
    function PostProcessing(renderer, material) {
        this.renderer = renderer;
        this.scene = new three__WEBPACK_IMPORTED_MODULE_0__.Scene();
        this.camera = new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera(-1.0, 1.0, 1.0, -1.0);
        this.screen = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(new three__WEBPACK_IMPORTED_MODULE_0__.PlaneBufferGeometry(2, 2));
        this.scene.add(this.screen);
        this.createMaterials(material);
    }
    PostProcessing.prototype.createMaterials = function (params) {
        var param = params;
        param.vertexShader = param.vertexShader || _shaders_passThrow_vs__WEBPACK_IMPORTED_MODULE_1__.default;
        param.uniforms = param.uniforms || {};
        param.uniforms.resolution = {
            value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()
        };
        this.effect = {
            material: new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(param),
        };
    };
    PostProcessing.prototype.render = function (inputRenderTargets, renderTarget) {
        var renderTargetMem = this.renderer.getRenderTarget();
        var effect = this.effect;
        var material = effect.material;
        var uniforms = material.uniforms;
        if (inputRenderTargets) {
            var keys = Object.keys(inputRenderTargets);
            for (var j = 0; j < keys.length; j++) {
                if (uniforms[keys[j]]) {
                    uniforms[keys[j]].value = inputRenderTargets[keys[j]];
                }
                else {
                    uniforms[keys[j]] = { value: inputRenderTargets[keys[j]] };
                    effect.material.needsUpdate = true;
                    effect.material.uniforms = uniforms;
                }
            }
        }
        if (renderTarget) {
            uniforms.resolution.value.set(renderTarget.width, renderTarget.height);
        }
        else {
            this.renderer.getSize(uniforms.resolution.value);
        }
        this.screen.material = material;
        this.renderer.setRenderTarget(renderTarget);
        this.renderer.render(this.scene, this.camera);
        this.renderer.setRenderTarget(renderTargetMem);
    };
    return PostProcessing;
}());



/***/ }),

/***/ "./src/utils/TimelineAnimator.ts":
/*!***************************************!*\
  !*** ./src/utils/TimelineAnimator.ts ***!
  \***************************************/
/*! namespace exports */
/*! export TimelineAnimator [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TimelineAnimator": () => /* binding */ TimelineAnimator
/* harmony export */ });
/* harmony import */ var _Lerps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lerps */ "./src/utils/Lerps.ts");

var TimelineAnimator = /** @class */ (function () {
    function TimelineAnimator() {
        this.variables = {};
        this.time = 0;
    }
    TimelineAnimator.prototype.add = function (params) {
        if (params.keyframes.length == 0) {
            console.warn('"' + params.name + '"', 'Keyframe length is 0!!');
            return;
        }
        this.variables[params.name] = {
            keyframes: params.keyframes,
            lerpFunc: params.customLerp,
            easing: params.easing,
            value: null
        };
        this.variables[params.name].keyframes.sort(function (a, b) {
            return (a.time < b.time) ? -1 : 1;
        });
        if (!this.variables[params.name].lerpFunc) {
            this.variables[params.name].lerpFunc = _Lerps__WEBPACK_IMPORTED_MODULE_0__.Lerps.getLerpFunc(params.keyframes[0].value);
        }
        this.calc();
        return params.name;
    };
    TimelineAnimator.prototype.get = function (name) {
        if (this.variables[name]) {
            return this.variables[name].value;
        }
        else {
            console.warn('"' + name + '"' + ' is not exist');
            return null;
        }
    };
    TimelineAnimator.prototype.getVariableObject = function (name) {
        if (this.variables[name]) {
            return this.variables[name];
        }
        else {
            console.warn('"' + name + '"' + ' is not exist');
            return null;
        }
    };
    TimelineAnimator.prototype.update = function (time) {
        this.time = time;
        this.calc();
    };
    TimelineAnimator.prototype.calc = function () {
        var keys = Object.keys(this.variables);
        for (var i = 0; i < keys.length; i++) {
            var valiable = this.variables[keys[i]];
            var kfs = valiable.keyframes;
            var a = void 0;
            var b = void 0;
            var t = Math.max(kfs[0].time, Math.min(kfs[kfs.length - 1].time, this.time));
            var easing = void 0;
            if (kfs.length == 1) {
                t = kfs[0].time;
                a = b = kfs[0];
            }
            else {
                for (var j = 0; j < kfs.length - 1; j++) {
                    a = kfs[j];
                    b = kfs[j + 1];
                    easing = a.easing;
                    if (a.time <= t && t <= b.time)
                        break;
                }
                t = (t - a.time) / (b.time - a.time);
            }
            if (easing) {
                t = easing.func(t, easing.args);
            }
            else if (valiable.easing) {
                t = valiable.easing.func(t, valiable.easing.args);
            }
            else if (this.defaultEasing) {
                t = this.defaultEasing.func(t, this.defaultEasing.args);
            }
            if (valiable.lerpFunc) {
                valiable.value = valiable.lerpFunc(a.value, b.value, t);
                if (valiable.value === false) {
                    console.log('error at ' + '"' + keys[i] + '"');
                }
            }
            else {
                console.warn('"' + keys[i] + '"', 'lerp function is not set.');
            }
        }
    };
    return TimelineAnimator;
}());



/***/ }),

/***/ "./src/utils/Uniforms.ts":
/*!*******************************!*\
  !*** ./src/utils/Uniforms.ts ***!
  \*******************************/
/*! namespace exports */
/*! export UniformsLib [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UniformsLib": () => /* binding */ UniformsLib
/* harmony export */ });
var UniformsLib;
(function (UniformsLib) {
    function mergeUniforms() {
        var uniforms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            uniforms[_i] = arguments[_i];
        }
        var res = {};
        for (var i = 0; i < uniforms.length; i++) {
            Object.assign(res, uniforms[i]);
        }
        return res;
    }
    UniformsLib.mergeUniforms = mergeUniforms;
})(UniformsLib || (UniformsLib = {}));


/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! default exports */
/*! export author [provided] [no usage info] [missing usage info prevents renaming] */
/*! export bugs [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export url [provided] [no usage info] [missing usage info prevents renaming] */
/*!   other exports [not provided] [no usage info] */
/*! export dependencies [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export lethargy [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export to-px [provided] [no usage info] [missing usage info prevents renaming] */
/*!   other exports [not provided] [no usage info] */
/*! export description [provided] [no usage info] [missing usage info prevents renaming] */
/*! export devDependencies [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export @types/node [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export @types/offscreencanvas [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export @types/webgl2 [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export @typescript-eslint/eslint-plugin [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export @typescript-eslint/parser [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export browser-sync [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export copy-webpack-plugin [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export del [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export eslint [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export eslint-config-mdcs [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export glslify-hex [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export glslify-import [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export glslify-loader [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-autoprefixer [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-cssmin [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-eslint [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-if [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-plumber [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-pug [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-sass [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-typedoc [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export gulp-typescript [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export raw-loader [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export three [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export ts-loader [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export typedoc [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export typescript [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export webpack [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export webpack-cli [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export webpack-dev-server [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export webpack-merge [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export webpack-stream [provided] [no usage info] [missing usage info prevents renaming] */
/*!   other exports [not provided] [no usage info] */
/*! export files [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export 0 [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export 1 [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export 2 [provided] [no usage info] [missing usage info prevents renaming] */
/*!   other exports [not provided] [no usage info] */
/*! export keywords [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export 0 [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export 1 [provided] [no usage info] [missing usage info prevents renaming] */
/*!   other exports [not provided] [no usage info] */
/*! export license [provided] [no usage info] [missing usage info prevents renaming] */
/*! export main [provided] [no usage info] [missing usage info prevents renaming] */
/*! export name [provided] [no usage info] [missing usage info prevents renaming] */
/*! export repository [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export type [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export url [provided] [no usage info] [missing usage info prevents renaming] */
/*!   other exports [not provided] [no usage info] */
/*! export types [provided] [no usage info] [missing usage info prevents renaming] */
/*! export version [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse("{\"name\":\"ore-three-ts\",\"version\":\"2.0.0-dev8\",\"description\":\"\",\"main\":\"build/ore-three-ts.js\",\"author\":\"ukonpower\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:ukonpower/ore-three-ts.git\"},\"keywords\":[\"threejs\",\"webgl\"],\"types\":\"types/index.d.ts\",\"files\":[\"build\",\"src\",\"types\"],\"bugs\":{\"url\":\"https://github.com/ukonpower/ore-three-ts/issues\"},\"devDependencies\":{\"@types/node\":\"^14.14.9\",\"@types/offscreencanvas\":\"^2019.6.2\",\"@types/webgl2\":\"0.0.5\",\"@typescript-eslint/eslint-plugin\":\"^4.8.1\",\"@typescript-eslint/parser\":\"^4.8.1\",\"browser-sync\":\"^2.26.13\",\"copy-webpack-plugin\":\"^6.3.2\",\"del\":\"^6.0.0\",\"eslint\":\"^7.14.0\",\"eslint-config-mdcs\":\"^5.0.0\",\"glslify-hex\":\"^2.1.1\",\"glslify-import\":\"^3.1.0\",\"glslify-loader\":\"^2.0.0\",\"gulp\":\"^4.0.2\",\"gulp-autoprefixer\":\"^7.0.1\",\"gulp-cssmin\":\"^0.2.0\",\"gulp-eslint\":\"^6.0.0\",\"gulp-if\":\"^3.0.0\",\"gulp-plumber\":\"^1.2.1\",\"gulp-pug\":\"^4.0.1\",\"gulp-sass\":\"^4.1.0\",\"gulp-typedoc\":\"^2.2.5\",\"gulp-typescript\":\"^6.0.0-alpha.1\",\"raw-loader\":\"^4.0.2\",\"three\":\"^0.123.0\",\"ts-loader\":\"^8.0.11\",\"typedoc\":\"^0.19.2\",\"typescript\":\"^4.1.2\",\"webpack\":\"^5.9.0\",\"webpack-cli\":\"^4.2.0\",\"webpack-dev-server\":\"^3.11.0\",\"webpack-merge\":\"^5.4.0\",\"webpack-stream\":\"^6.1.1\"},\"dependencies\":{\"lethargy\":\"^1.0.9\",\"to-px\":\"^1.1.0\"}}");

/***/ }),

/***/ "three":
/*!**************************************************************************************!*\
  !*** external {"commonjs":"three","commonjs2":"three","amd":"three","root":"THREE"} ***!
  \**************************************************************************************/
/*! dynamic exports */
/*! export __esModule [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] */
/*! other exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_three__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/index.ts");
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,