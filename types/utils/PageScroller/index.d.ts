import * as THREE from 'three';
import { EasingSet } from '../Easings';
import { PageScrollerSection } from './PageScrollerSection';
export declare interface PageScrollerMoveToParam {
    target: HTMLElement | string | number;
    duration?: number;
    callback?: Function;
    bottom?: boolean;
    lock?: boolean;
    force?: boolean;
}
export interface ScrollPercentages {
    [key: string]: number;
}
export declare class PageScroller {
    protected element: HTMLElement;
    protected rect: ClientRect;
    enabled: boolean;
    protected _velocity: number;
    protected _pageOffset: number;
    protected _pageOffsetMem: number;
    velocityAttenuation: number;
    protected x: number;
    protected duration: number;
    protected baseOffset: number;
    protected targetOffset: number;
    protected scrollDistance: number;
    protected onAutoMoveFinished: Function;
    protected isAutoMoving: boolean;
    protected autoMovingLock: boolean;
    protected forceAutoMove: boolean;
    sections: PageScrollerSection[];
    sectionScrollPercentages: ScrollPercentages;
    currentSectionNum: number;
    protected easingPos: EasingSet;
    protected easingRot: EasingSet;
    protected easingAutoMove: EasingSet;
    threePosition: THREE.Vector3;
    threeRotation: THREE.Quaternion;
    protected isStop: boolean;
    protected stopSection: number;
    get pageOffset(): number;
    get scrollVel(): number;
    get scrollPercentage(): number;
    getScrollPercentage(sectionA?: PageScrollerSection, sectionB?: PageScrollerSection): number;
    constructor(element: HTMLElement);
    protected initEasings(): void;
    addVelocity(scrollVelocity: number): void;
    setVelocity(scrollVelocity: number): void;
    protected checkUnlockStopScroll(scrollVelocity: number, mode: string): boolean;
    setEasingPos(easingFunction: Function, ...variables: number[]): void;
    setEasingRot(easingFunction: Function, ...variables: number[]): void;
    setEasingAutoMove(easingFunction: Function, ...variables: number[]): void;
    moveto(param: PageScrollerMoveToParam): void;
    update(deltaTime?: number): void;
    protected updateScroll(deltaTime: number): void;
    protected manualScroll(deltaTime: number): void;
    protected autoScroll(deltaTime: number): void;
    protected applyPageOffset(pageOffset: number): void;
    protected checkThrowSection(): void;
    protected onThrowSection(secNum: number): void;
    protected setPageOffsetToSection(secNum: number): void;
    getSection(name: string): PageScrollerSection;
    protected getCurrentSection(): number;
    protected calcScrollPercentage(): void;
    protected calcThreePosition(): void;
    protected calcThreeRotation(): void;
    protected calcThreeEasings(value: number, section: PageScrollerSection, type: string): any;
    addSection(section: PageScrollerSection): void;
    protected sortSections(): void;
    resize(): void;
}
